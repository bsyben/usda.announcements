install.packages("Rblpapi")
library(Rblpapi)
con <- blpConnect()
dt <- bdh(
securities = "LHJ10",
fields = "DAILY_LIMIT_UP",
start.date = as.Date("2010-01-01")
)
dt <- bdp(
securities = "LHJ10",
fields = "DAILY_LIMIT_UP",
start.date = as.Date("2010-01-01")
)
dt <- bdp(
securities = "LHJ10",
fields = "DAILY_LIMIT_UP"
)
dt <- bds(
securities = "LHJ10",
fields = "DAILY_LIMIT_UP"
)
dt <- bds(
security  = "LHJ10",
field = "DAILY_LIMIT_UP"
)
dt <- bds(
security  = "LHJ20",
field = "DAILY_LIMIT_UP"
)
dt <- bds(
security  = "LHJ19",
field = "DAILY_LIMIT_UP"
)
dt <- bdh(
securities  = "LHJ19",
fields = "DAILY_LIMIT_UP",
start.date = as.Date("2019-01-01")
)
dt <- bdh(
securities  = "LHJ9",
fields = "DAILY_LIMIT_UP",
start.date = as.Date("2019-01-01")
)
dt <- bdh(
securities  = "LHJ0",
fields = "DAILY_LIMIT_UP",
start.date = as.Date("2019-01-01")
)
dt <- bdh(
securities  = "LHJ0",
fields = "PX_LAST",
start.date = as.Date("2019-01-01")
)
dt <- bdh(
securities  = "LHJ0 Comdty",
fields = "PX_LAST",
start.date = as.Date("2019-01-01")
)
dt <- bdh(
securities  = "LHJ0 Comdty",
fields = "DAILY_LIMIT_UP",
start.date = as.Date("2019-01-01")
)
View(dt)
dt <- bdh(
securities  = "LHJ06 Comdty",
fields = "DAILY_LIMIT_UP",
start.date = as.Date("2006-01-01")
)
dt <- bdh(
securities  = "LHJ06 Comdty",
fields = "PX_LAST",
start.date = as.Date("2006-01-01")
)
library(Rblpapi)
con <- blpConnect()
dt <- bdh(
securities  = "LHM9 Comdty",
fields = c("DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2019-05-30")
)
View(dt)
dt <- bdh(
securities  = "LHM9 Comdty",
fields = c("PX_OPEN","PX_HIGH","DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2019-05-30")
)
View(dt)
dt <- bdh(
securities  = "LHM9 Comdty",
fields = c("PX_OPEN","PX_HIGH","PX_LOW", "DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2019-05-30")
)
View(dt)
dt <- bdh(
securities  = "LHM9 Comdty",
fields = c("PX_OPEN","PX_HIGH","PX_LOW", "DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2018-05-30")
)
View(dt)
ticker <- list(
"LHM9 Comdty",
"LHN9 Comdty",
"LHQ9 Comdty",
"LHV9 Comdty",
"LHZ9 Comdty",
"LHG0 Comdty",
"LHJ0 Comdty",
"LHK0 Comdty",
"LHM0 Comdty",
"LHN0 Comdty"
)
ticker <- setNames(ticker, ticker)
dt <- lapply(
ticker,
function(x) {
bdh(
securities  = x,
fields = c("PX_OPEN","PX_HIGH","PX_LOW", "PX_CLOSE", "DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2019-05-30")
)
}
)
dt <- lapply(
ticker,
function(x) {
bdh(
securities  = x,
fields = c("PX_OPEN","PX_HIGH","PX_LOW", "PX_LAST", "DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2019-05-30")
)
}
)
ticker <- list(
"LHV8 Comdty",
"LHZ8 Comdty",
"LHG9 Comdty",
"LHJ9 Comdty",
"LHK9 Comdty",
"LHM9 Comdty",
"LHN9 Comdty"
)
ticker <- setNames(ticker, ticker)
dt2 <- lapply(
ticker,
function(x) {
bdh(
securities  = x,
fields = c("PX_OPEN","PX_HIGH","PX_LOW", "PX_LAST", "DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2019-05-30")
)
}
)
dt <- rbindlist(
c(dt, dt2),
idcol = TRUE
)
install.packages("data.table")
library(data.table)
dt <- rbindlist(
c(dt, dt2),
idcol = TRUE
)
View(dt)
fwrite(
dt,
file = "R//temp.csv",
dateTimeAs = "write.csv"
)
fwrite(
dt,
file = "R://temp.csv",
dateTimeAs = "write.csv"
)
library(Rblpapi)
library(data.table)
con <- blpConnect()
ticker <- list(
"LHM9 Comdty",
"LHN9 Comdty",
"LHQ9 Comdty",
"LHV9 Comdty",
"LHZ9 Comdty",
"LHG0 Comdty",
"LHJ0 Comdty",
"LHK0 Comdty",
"LHM0 Comdty",
"LHN0 Comdty",
"LHQ0 Comdty",
"LHV0 Comdty",
"LHZ0 Comdty",
"LHG1 Comdty",
"LHJ1 Comdty",
"LHK1 Comdty",
"LHM1 Comdty",
"LHN1 Comdty"
)
ticker <- setNames(ticker, ticker)
dt <- lapply(
ticker,
function(x) {
bdh(
securities  = x,
fields = c("PX_OPEN","PX_HIGH","PX_LOW", "PX_LAST", "DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2018-11-30")
)
}
)
dt <- lapply(
ticker,
function(x) {
bdh(
securities  = x,
fields = c("PX_OPEN","PX_HIGH","PX_LOW", "PX_LAST", "PX_VOLUME", "OPEN_INT", "DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2018-11-30")
)
}
)
dt <- rbindlist(
dt,
use.names = TRUE
)
View(dt)
dt <- lapply(
ticker,
function(x) {
bdh(
securities  = x,
fields = c("PX_OPEN","PX_HIGH","PX_LOW", "PX_LAST", "PX_VOLUME", "OPEN_INT", "DAILY_LIMIT_UP", "DAILY_LIMIT_DOWN"),
start.date = as.Date("2018-11-30")
)
}
)
dt <- rbindlist(
dt,
use.names = TRUE,
idcol = TRUE
)
View(dt)
dt[date == "2019-09-12"]
dt[date == "2019-09-11"]
fwrite(
dt,
file = "R://temp.csv",
dateTimeAs = "write.csv"
)
devtools::create("usda.announcements")
key="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjQ3NzJ9.J_iSIoycXn2FhgZzR53rYuyfxNoSE1F6RfhOsaagrAs"
is.character(key)
length(key)
nchar(key)
start_date <- "2008-01-01"
end_date <- "2012-03-01"
start_date <- as.Date(start_date)
start_date
end_date <- as.Date(end_date)
end_date
latest <- ifelse(latest,"true","false")
latest <- F
latest <- ifelse(latest,"true","false")
identifier <- "wasde"
url <- paste0("https://usda.library.cornell.edu/api/v1/release/findByIdentifier/",identifier,
"?latest=",latest,"&start_date=",start_date,"&end_date=",end_date)
url
Results <- GET(url=url,add_headers(accept="application/json",Authorization=paste("Bearer",key,sep=" ")))
Results <- httr::GET(url=url,add_headers(accept="application/json",Authorization=paste("Bearer",key,sep=" ")))
Results <- httr::GET(url=url,httr::add_headers(accept="application/json",Authorization=paste("Bearer",key,sep=" ")))
Results <- httr::content(Results,"parsed")
announcement_dates <- unlist(purrr::map(Results,purrr::pluck,"release_datetime"))
announcement_dates
devtools::document()
setwd("usda.announcements/")
devtools::document()
library(usda.announcements)
library(usda.announcements)
library(usda.announcements)
start_date = "2009-01-02"
end_date = "2018-05-22"
identifier = "wasde"
key="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjQ3NzJ9.J_iSIoycXn2FhgZzR53rYuyfxNoSE1F6RfhOsaagrAs"
latest=F
if(!is.character(key)){
stop("The api key must be a string")
}
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
latest <- ifelse(latest,"true","false")
if(!is.character(identifier)){
stop("identifier must be a string, such as wasde")
}
url <- paste0("https://usda.library.cornell.edu/api/v1/release/findByIdentifier/",identifier,
"?latest=",latest,"&start_date=",start_date,"&end_date=",end_date)
Results <- httr::RETRY("GET",url=url,httr::add_headers(accept="application/json",Authorization=paste("Bearer",key,sep=" ")),times=5)
Results <- httr::content(Results,"parsed")
Results
library(data.table)
install.packages("data.table")
library(data.table)
?rbindlist
str(Results)
rbindlist(rbindlist(Results))
rbindlist(
lapply(data.table, rbindlist)
)
rbindlist(
Results,fill = T
)
start_date="2019-01-01"
end_date="2020-01-01"
if(!is.character(key)){
stop("The api key must be a string")
}
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
latest <- ifelse(latest,"true","false")
if(!is.character(identifier)){
stop("identifier must be a string, such as wasde")
}
url <- paste0("https://usda.library.cornell.edu/api/v1/release/findByIdentifier/",identifier,
"?latest=",latest,"&start_date=",start_date,"&end_date=",end_date)
Results <- httr::RETRY("GET",url=url,httr::add_headers(accept="application/json",Authorization=paste("Bearer",key,sep=" ")),times=5)
Results <- httr::content(Results,"parsed")
rbindlist(Results,fill = T)
library(httr)
library(jsonlite)
library(purrr)
library(DBI)
library(usda.announcements)
WASDE_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "wasde")
setDT(WASDE_dates)
setDT(list(WASDE_dates))
WASDE_dates
WASDE_dates[,Announcement:='WASDE']
WASDE_dates <- cbind(WASDE_dates,"WASDE")
WASDE_dates
WASDE_dates <- cbind.data.frame(WASDE_dates,"WASDE")
WASDE_dates
WASDE_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "wasde")
GS_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "GraiStoc")
PP_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "ProsPlan")
CP_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "CropProd")
Acreage_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "Acre")
WASDE_dates <- cbind.data.frame(WASDE_dates,"WASDE")
WASDE_dates
colnames(WASDE_dates) <- c("Date","Announcement")
WASDE_dates
GS_dates <- cbind.data.frame(GS_dates,"GS")
colnames(GS_dates) <- c("Date","Announcement")
PP_dates <- cbind.data.frame(PP_dates,"PP")
colnames(PP_dates) <- c("Date","Announcement")
CP_dates <- cbind.data.frame(CP_dates,"CP")
colnames(CP_dates) <- c("Date","Announcement")
Acreage_dates <- cbind.data.frame(Acreage_dates,"Acreage")
colnames(Acreage_dates) <- c("Date","Announcement")
Acreage_dates
install.packages("dplyr")
dplyr::bind_rows(WASDE_dates,GS_dates,PP_dates,CP_dates,Acreage_dates)
Announcement_dates<- dplyr::bind_rows(WASDE_dates,GS_dates,PP_dates,CP_dates,Acreage_dates)
Announcement_dates<- dplyr::bind_rows(WASDE_dates,GS_dates,PP_dates,CP_dates,Acreage_dates)
setDT(Announcement_dates)
Announcement_dates
dcast.data.table(Announcement_dates,Date~Announcement_dates)
dcast.data.table(Announcement_dates,Date~Announcement_dates,value.var = "Announcement_dates")
dcast.data.table(Announcement_dates,Date~Announcement_dates,value.var = "Announcement")
dcast.data.table(Announcement_dates,Date~Announcement,value.var = "Announcement")
Announcement_dates<- dcast.data.table(Announcement_dates,Date~Announcement,value.var = "Announcement")
Announcement_dates
Announcement_dates[!is.na(Acreage),]
Announcement_dates[!is.na(GS),]
Announcement_dates[!is.na(PP),]
Announcement_dates[!is.na(WASDE),]
Announcement_dates[!is.na(WASDE),Date]
Announcement_dates[!is.na(WASDE),class(Date)]
library(usda.announcements)
WASDE_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "wasde")
WASDE_dates
GS_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "GraiStoc")
PP_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "ProsPlan")
CP_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "CropProd")
Acreage_dates <- release_dates(start_date = "2009-01-02",end_date = "2018-05-22",identifier = "Acre")
Announcement_dates<- dplyr::bind_rows(WASDE_dates,GS_dates,PP_dates,CP_dates,Acreage_dates)
setDT(Announcement_dates)
Announcement_dates
Announcement_dates<- dcast.data.table(Announcement_dates,Announcement_dates~identifier,value.var = "identifier")
Announcement_dates<- dcast.data.table(Announcement_dates,announcement_dates~identifier,value.var = "identifier")
Announcement_dates[!is.na(WASDE),class(Date)]
Announcement_dates
Announcement_dates[!is.na(wasde),class(Date)]
Announcement_dates[!is.na(wasde),]
